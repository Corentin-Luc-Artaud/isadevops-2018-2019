<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.7"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.7">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.29.4">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.4">
      <projectUrl>https://github.com/pns-isa-devops-1819/teami-hyperplanning.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
    <script>def app
// env.registry = &quot;https://registry.hub.docker.com/&quot; // rockduatra/team-i&quot;
// env.registryCredential = &apos;c0bf6b89-d4f6-4535-ac89-09240d31e7cb&apos;
pipeline {
    agent none
    stages {
        stage(&apos;Checkout&apos;) {
            agent any
            steps {
                git credentialsId: &apos;97fbda0c-87a0-475d-b85b-e27c7e4a8d2a&apos;, url: &apos;https://github.com/pns-isa-devops-1819/teami-hyperplanning.git&apos;
            }
        }
        stage(&apos;Build&apos;) {
            agent { docker { image &apos;mono&apos; } }
            steps {
                sh &apos;ls&apos;
                sh &apos;./build.sh&apos;
            }
        }
        stage(&apos;Deploy&apos;) {
            agent any
            steps {
                rtUpload ( serverId: &quot;Artifactory&quot;,
                spec: 
                    &quot;&quot;&quot;{ &quot;files&quot;: [ 
                        { &quot;pattern&quot;: &quot;*.exe&quot;,
                        &quot;target&quot;: &quot;generic-local/teami/0.0/hyperplanning.exe&quot; 
                        } ] }&quot;&quot;&quot; ) 
            }
        }
        stage(&apos;Docker build&apos;) {
            agent any
            steps {
                script {
                    app = docker.build(&quot;rockduatra/hyperplanning&quot;)
                }
            }
        }
        stage(&apos;Docker publish&apos;) {
            agent any
            steps {
                script {
                    docker.withRegistry(&apos;https://registry.hub.docker.com&apos;, &apos;c0bf6b89-d4f6-4535-ac89-09240d31e7cb&apos;) {
                        app.push()
                    }
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>